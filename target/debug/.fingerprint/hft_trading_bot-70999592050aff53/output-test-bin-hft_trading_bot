{"$message_type":"diagnostic","message":"unused import: `Instant`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":139,"byte_end":146,"line_start":5,"line_end":5,"column_start":27,"column_end":34,"is_primary":true,"text":[{"text":"use std::time::{Duration, Instant};","highlight_start":27,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":137,"byte_end":146,"line_start":5,"line_end":5,"column_start":25,"column_end":34,"is_primary":true,"text":[{"text":"use std::time::{Duration, Instant};","highlight_start":25,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":128,"byte_end":129,"line_start":5,"line_end":5,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"use std::time::{Duration, Instant};","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":146,"byte_end":147,"line_start":5,"line_end":5,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"use std::time::{Duration, Instant};","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Instant`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:27\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::time::{Duration, Instant};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio::time`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":189,"byte_end":200,"line_start":7,"line_end":7,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use tokio::time;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":185,"byte_end":203,"line_start":7,"line_end":8,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::time;","highlight_start":1,"highlight_end":17},{"text":"use uuid::Uuid;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio::time`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::time;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":12096,"byte_end":12907,"line_start":420,"line_end":439,"column_start":37,"column_end":14,"is_primary":true,"text":[{"text":"            let task = tokio::spawn(async move {","highlight_start":37,"highlight_end":49},{"text":"                let market_feed = unsafe { &*market_feed_ptr };","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                while *is_running.lock().await {","highlight_start":1,"highlight_end":49},{"text":"                    if let Some(price) = market_feed.get_price(&symbol_clone).await {","highlight_start":1,"highlight_end":86},{"text":"                        let mut history = price_history.write().await;","highlight_start":1,"highlight_end":71},{"text":"                        let symbol_history =","highlight_start":1,"highlight_end":45},{"text":"                            history.entry(symbol_clone.clone()).or_insert_with(Vec::new);","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        symbol_history.push(price);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                        // Keep only last 1000 prices","highlight_start":1,"highlight_end":54},{"text":"                        if symbol_history.len() > 1000 {","highlight_start":1,"highlight_end":57},{"text":"                            symbol_history.remove(0);","highlight_start":1,"highlight_end":54},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    tokio::time::sleep(Duration::from_millis(100)).await;","highlight_start":1,"highlight_end":74},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            });","highlight_start":1,"highlight_end":14}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:420:37: 420:47}`, the trait `std::marker::Send` is not implemented for `*const MarketDataFeed`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":12155,"byte_end":12170,"line_start":421,"line_end":421,"column_start":46,"column_end":61,"is_primary":true,"text":[{"text":"                let market_feed = unsafe { &*market_feed_ptr };","highlight_start":46,"highlight_end":61}],"label":"has type `*const MarketDataFeed` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:420:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            let task = tokio::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m _____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let market_feed = unsafe { &*market_feed_ptr };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m422\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m423\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                while *is_running.lock().await {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            });\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:420:37: 420:47}`, the trait `std::marker::Send` is not implemented for `*const MarketDataFeed`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:421:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let market_feed = unsafe { &*market_feed_ptr };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `*const MarketDataFeed` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13687,"byte_end":17007,"line_start":460,"line_end":527,"column_start":22,"column_end":10,"is_primary":true,"text":[{"text":"        tokio::spawn(async move {","highlight_start":22,"highlight_end":34},{"text":"            let strategies = unsafe { &*strategies };","highlight_start":1,"highlight_end":54},{"text":"            let risk_manager = unsafe { &*risk_manager };","highlight_start":1,"highlight_end":58},{"text":"            let order_executor = unsafe { &*order_executor };","highlight_start":1,"highlight_end":62},{"text":"            let market_feed = unsafe { &*market_feed };","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while *is_running.lock().await {","highlight_start":1,"highlight_end":45},{"text":"                let history = price_history.read().await;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for (symbol, prices) in history.iter() {","highlight_start":1,"highlight_end":57},{"text":"                    if prices.len() < 10 {","highlight_start":1,"highlight_end":43},{"text":"                        continue;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    if let Some(orderbook) = market_feed.get_orderbook(symbol).await {","highlight_start":1,"highlight_end":87},{"text":"                        // Run strategies","highlight_start":1,"highlight_end":42},{"text":"                        for strategy in strategies.iter() {","highlight_start":1,"highlight_end":60},{"text":"                            if let Some(signal) = strategy.analyze(prices, &orderbook) {","highlight_start":1,"highlight_end":89},{"text":"                                println!(\"Signal from {}: {:?}\", strategy.name(), signal);","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Create order","highlight_start":1,"highlight_end":48},{"text":"                                let order = Order {","highlight_start":1,"highlight_end":52},{"text":"                                    id: Uuid::new_v4().to_string(),","highlight_start":1,"highlight_end":68},{"text":"                                    symbol: signal.symbol.clone(),","highlight_start":1,"highlight_end":67},{"text":"                                    side: signal.action,","highlight_start":1,"highlight_end":57},{"text":"                                    order_type: OrderType::Market,","highlight_start":1,"highlight_end":67},{"text":"                                    quantity: signal.quantity,","highlight_start":1,"highlight_end":63},{"text":"                                    price: None,","highlight_start":1,"highlight_end":49},{"text":"                                    timestamp: std::time::SystemTime::now()","highlight_start":1,"highlight_end":76},{"text":"                                        .duration_since(std::time::UNIX_EPOCH)","highlight_start":1,"highlight_end":79},{"text":"                                        .unwrap()","highlight_start":1,"highlight_end":50},{"text":"                                        .as_secs(),","highlight_start":1,"highlight_end":52},{"text":"                                };","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Validate with risk manager","highlight_start":1,"highlight_end":62},{"text":"                                if risk_manager","highlight_start":1,"highlight_end":48},{"text":"                                    .validate_order(&order, signal.target_price)","highlight_start":1,"highlight_end":81},{"text":"                                    .await","highlight_start":1,"highlight_end":43},{"text":"                                {","highlight_start":1,"highlight_end":34},{"text":"                                    // Submit order","highlight_start":1,"highlight_end":52},{"text":"                                    if let Ok(order_id) =","highlight_start":1,"highlight_end":58},{"text":"                                        order_executor.submit_order(order.clone()).await","highlight_start":1,"highlight_end":89},{"text":"                                    {","highlight_start":1,"highlight_end":38},{"text":"                                        println!(\"Order submitted: {}\", order_id);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        // Update position","highlight_start":1,"highlight_end":59},{"text":"                                        let quantity = match order.side {","highlight_start":1,"highlight_end":74},{"text":"                                            OrderSide::Buy => order.quantity,","highlight_start":1,"highlight_end":78},{"text":"                                            OrderSide::Sell => -order.quantity,","highlight_start":1,"highlight_end":80},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        risk_manager","highlight_start":1,"highlight_end":53},{"text":"                                            .update_position(","highlight_start":1,"highlight_end":62},{"text":"                                                &order.symbol,","highlight_start":1,"highlight_end":63},{"text":"                                                quantity,","highlight_start":1,"highlight_end":58},{"text":"                                                signal.target_price,","highlight_start":1,"highlight_end":69},{"text":"                                            )","highlight_start":1,"highlight_end":46},{"text":"                                            .await;","highlight_start":1,"highlight_end":52},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tokio::time::sleep(Duration::from_millis(50)).await; // High frequency - 20 Hz","highlight_start":1,"highlight_end":95},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const Vec<Box<dyn TradingStrategy>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":13741,"byte_end":13751,"line_start":461,"line_end":461,"column_start":41,"column_end":51,"is_primary":true,"text":[{"text":"            let strategies = unsafe { &*strategies };","highlight_start":41,"highlight_end":51}],"label":"has type `*const Vec<Box<dyn TradingStrategy>>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:460:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        tokio::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let strategies = unsafe { &*strategies };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let risk_manager = unsafe { &*risk_manager };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let order_executor = unsafe { &*order_executor };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const Vec<Box<dyn TradingStrategy>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:461:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let strategies = unsafe { &*strategies };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `*const Vec<Box<dyn TradingStrategy>>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13687,"byte_end":17007,"line_start":460,"line_end":527,"column_start":22,"column_end":10,"is_primary":true,"text":[{"text":"        tokio::spawn(async move {","highlight_start":22,"highlight_end":34},{"text":"            let strategies = unsafe { &*strategies };","highlight_start":1,"highlight_end":54},{"text":"            let risk_manager = unsafe { &*risk_manager };","highlight_start":1,"highlight_end":58},{"text":"            let order_executor = unsafe { &*order_executor };","highlight_start":1,"highlight_end":62},{"text":"            let market_feed = unsafe { &*market_feed };","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while *is_running.lock().await {","highlight_start":1,"highlight_end":45},{"text":"                let history = price_history.read().await;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for (symbol, prices) in history.iter() {","highlight_start":1,"highlight_end":57},{"text":"                    if prices.len() < 10 {","highlight_start":1,"highlight_end":43},{"text":"                        continue;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    if let Some(orderbook) = market_feed.get_orderbook(symbol).await {","highlight_start":1,"highlight_end":87},{"text":"                        // Run strategies","highlight_start":1,"highlight_end":42},{"text":"                        for strategy in strategies.iter() {","highlight_start":1,"highlight_end":60},{"text":"                            if let Some(signal) = strategy.analyze(prices, &orderbook) {","highlight_start":1,"highlight_end":89},{"text":"                                println!(\"Signal from {}: {:?}\", strategy.name(), signal);","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Create order","highlight_start":1,"highlight_end":48},{"text":"                                let order = Order {","highlight_start":1,"highlight_end":52},{"text":"                                    id: Uuid::new_v4().to_string(),","highlight_start":1,"highlight_end":68},{"text":"                                    symbol: signal.symbol.clone(),","highlight_start":1,"highlight_end":67},{"text":"                                    side: signal.action,","highlight_start":1,"highlight_end":57},{"text":"                                    order_type: OrderType::Market,","highlight_start":1,"highlight_end":67},{"text":"                                    quantity: signal.quantity,","highlight_start":1,"highlight_end":63},{"text":"                                    price: None,","highlight_start":1,"highlight_end":49},{"text":"                                    timestamp: std::time::SystemTime::now()","highlight_start":1,"highlight_end":76},{"text":"                                        .duration_since(std::time::UNIX_EPOCH)","highlight_start":1,"highlight_end":79},{"text":"                                        .unwrap()","highlight_start":1,"highlight_end":50},{"text":"                                        .as_secs(),","highlight_start":1,"highlight_end":52},{"text":"                                };","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Validate with risk manager","highlight_start":1,"highlight_end":62},{"text":"                                if risk_manager","highlight_start":1,"highlight_end":48},{"text":"                                    .validate_order(&order, signal.target_price)","highlight_start":1,"highlight_end":81},{"text":"                                    .await","highlight_start":1,"highlight_end":43},{"text":"                                {","highlight_start":1,"highlight_end":34},{"text":"                                    // Submit order","highlight_start":1,"highlight_end":52},{"text":"                                    if let Ok(order_id) =","highlight_start":1,"highlight_end":58},{"text":"                                        order_executor.submit_order(order.clone()).await","highlight_start":1,"highlight_end":89},{"text":"                                    {","highlight_start":1,"highlight_end":38},{"text":"                                        println!(\"Order submitted: {}\", order_id);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        // Update position","highlight_start":1,"highlight_end":59},{"text":"                                        let quantity = match order.side {","highlight_start":1,"highlight_end":74},{"text":"                                            OrderSide::Buy => order.quantity,","highlight_start":1,"highlight_end":78},{"text":"                                            OrderSide::Sell => -order.quantity,","highlight_start":1,"highlight_end":80},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        risk_manager","highlight_start":1,"highlight_end":53},{"text":"                                            .update_position(","highlight_start":1,"highlight_end":62},{"text":"                                                &order.symbol,","highlight_start":1,"highlight_end":63},{"text":"                                                quantity,","highlight_start":1,"highlight_end":58},{"text":"                                                signal.target_price,","highlight_start":1,"highlight_end":69},{"text":"                                            )","highlight_start":1,"highlight_end":46},{"text":"                                            .await;","highlight_start":1,"highlight_end":52},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tokio::time::sleep(Duration::from_millis(50)).await; // High frequency - 20 Hz","highlight_start":1,"highlight_end":95},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const RiskManager`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":13798,"byte_end":13810,"line_start":462,"line_end":462,"column_start":43,"column_end":55,"is_primary":true,"text":[{"text":"            let risk_manager = unsafe { &*risk_manager };","highlight_start":43,"highlight_end":55}],"label":"has type `*const RiskManager` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:460:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        tokio::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let strategies = unsafe { &*strategies };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let risk_manager = unsafe { &*risk_manager };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let order_executor = unsafe { &*order_executor };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const RiskManager`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:462:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let risk_manager = unsafe { &*risk_manager };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `*const RiskManager` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13687,"byte_end":17007,"line_start":460,"line_end":527,"column_start":22,"column_end":10,"is_primary":true,"text":[{"text":"        tokio::spawn(async move {","highlight_start":22,"highlight_end":34},{"text":"            let strategies = unsafe { &*strategies };","highlight_start":1,"highlight_end":54},{"text":"            let risk_manager = unsafe { &*risk_manager };","highlight_start":1,"highlight_end":58},{"text":"            let order_executor = unsafe { &*order_executor };","highlight_start":1,"highlight_end":62},{"text":"            let market_feed = unsafe { &*market_feed };","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while *is_running.lock().await {","highlight_start":1,"highlight_end":45},{"text":"                let history = price_history.read().await;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for (symbol, prices) in history.iter() {","highlight_start":1,"highlight_end":57},{"text":"                    if prices.len() < 10 {","highlight_start":1,"highlight_end":43},{"text":"                        continue;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    if let Some(orderbook) = market_feed.get_orderbook(symbol).await {","highlight_start":1,"highlight_end":87},{"text":"                        // Run strategies","highlight_start":1,"highlight_end":42},{"text":"                        for strategy in strategies.iter() {","highlight_start":1,"highlight_end":60},{"text":"                            if let Some(signal) = strategy.analyze(prices, &orderbook) {","highlight_start":1,"highlight_end":89},{"text":"                                println!(\"Signal from {}: {:?}\", strategy.name(), signal);","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Create order","highlight_start":1,"highlight_end":48},{"text":"                                let order = Order {","highlight_start":1,"highlight_end":52},{"text":"                                    id: Uuid::new_v4().to_string(),","highlight_start":1,"highlight_end":68},{"text":"                                    symbol: signal.symbol.clone(),","highlight_start":1,"highlight_end":67},{"text":"                                    side: signal.action,","highlight_start":1,"highlight_end":57},{"text":"                                    order_type: OrderType::Market,","highlight_start":1,"highlight_end":67},{"text":"                                    quantity: signal.quantity,","highlight_start":1,"highlight_end":63},{"text":"                                    price: None,","highlight_start":1,"highlight_end":49},{"text":"                                    timestamp: std::time::SystemTime::now()","highlight_start":1,"highlight_end":76},{"text":"                                        .duration_since(std::time::UNIX_EPOCH)","highlight_start":1,"highlight_end":79},{"text":"                                        .unwrap()","highlight_start":1,"highlight_end":50},{"text":"                                        .as_secs(),","highlight_start":1,"highlight_end":52},{"text":"                                };","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Validate with risk manager","highlight_start":1,"highlight_end":62},{"text":"                                if risk_manager","highlight_start":1,"highlight_end":48},{"text":"                                    .validate_order(&order, signal.target_price)","highlight_start":1,"highlight_end":81},{"text":"                                    .await","highlight_start":1,"highlight_end":43},{"text":"                                {","highlight_start":1,"highlight_end":34},{"text":"                                    // Submit order","highlight_start":1,"highlight_end":52},{"text":"                                    if let Ok(order_id) =","highlight_start":1,"highlight_end":58},{"text":"                                        order_executor.submit_order(order.clone()).await","highlight_start":1,"highlight_end":89},{"text":"                                    {","highlight_start":1,"highlight_end":38},{"text":"                                        println!(\"Order submitted: {}\", order_id);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        // Update position","highlight_start":1,"highlight_end":59},{"text":"                                        let quantity = match order.side {","highlight_start":1,"highlight_end":74},{"text":"                                            OrderSide::Buy => order.quantity,","highlight_start":1,"highlight_end":78},{"text":"                                            OrderSide::Sell => -order.quantity,","highlight_start":1,"highlight_end":80},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        risk_manager","highlight_start":1,"highlight_end":53},{"text":"                                            .update_position(","highlight_start":1,"highlight_end":62},{"text":"                                                &order.symbol,","highlight_start":1,"highlight_end":63},{"text":"                                                quantity,","highlight_start":1,"highlight_end":58},{"text":"                                                signal.target_price,","highlight_start":1,"highlight_end":69},{"text":"                                            )","highlight_start":1,"highlight_end":46},{"text":"                                            .await;","highlight_start":1,"highlight_end":52},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tokio::time::sleep(Duration::from_millis(50)).await; // High frequency - 20 Hz","highlight_start":1,"highlight_end":95},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const OrderExecutor`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":13859,"byte_end":13873,"line_start":463,"line_end":463,"column_start":45,"column_end":59,"is_primary":true,"text":[{"text":"            let order_executor = unsafe { &*order_executor };","highlight_start":45,"highlight_end":59}],"label":"has type `*const OrderExecutor` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:460:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        tokio::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let strategies = unsafe { &*strategies };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let risk_manager = unsafe { &*risk_manager };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let order_executor = unsafe { &*order_executor };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const OrderExecutor`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:463:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let order_executor = unsafe { &*order_executor };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `*const OrderExecutor` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":13687,"byte_end":17007,"line_start":460,"line_end":527,"column_start":22,"column_end":10,"is_primary":true,"text":[{"text":"        tokio::spawn(async move {","highlight_start":22,"highlight_end":34},{"text":"            let strategies = unsafe { &*strategies };","highlight_start":1,"highlight_end":54},{"text":"            let risk_manager = unsafe { &*risk_manager };","highlight_start":1,"highlight_end":58},{"text":"            let order_executor = unsafe { &*order_executor };","highlight_start":1,"highlight_end":62},{"text":"            let market_feed = unsafe { &*market_feed };","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            while *is_running.lock().await {","highlight_start":1,"highlight_end":45},{"text":"                let history = price_history.read().await;","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for (symbol, prices) in history.iter() {","highlight_start":1,"highlight_end":57},{"text":"                    if prices.len() < 10 {","highlight_start":1,"highlight_end":43},{"text":"                        continue;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    if let Some(orderbook) = market_feed.get_orderbook(symbol).await {","highlight_start":1,"highlight_end":87},{"text":"                        // Run strategies","highlight_start":1,"highlight_end":42},{"text":"                        for strategy in strategies.iter() {","highlight_start":1,"highlight_end":60},{"text":"                            if let Some(signal) = strategy.analyze(prices, &orderbook) {","highlight_start":1,"highlight_end":89},{"text":"                                println!(\"Signal from {}: {:?}\", strategy.name(), signal);","highlight_start":1,"highlight_end":91},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Create order","highlight_start":1,"highlight_end":48},{"text":"                                let order = Order {","highlight_start":1,"highlight_end":52},{"text":"                                    id: Uuid::new_v4().to_string(),","highlight_start":1,"highlight_end":68},{"text":"                                    symbol: signal.symbol.clone(),","highlight_start":1,"highlight_end":67},{"text":"                                    side: signal.action,","highlight_start":1,"highlight_end":57},{"text":"                                    order_type: OrderType::Market,","highlight_start":1,"highlight_end":67},{"text":"                                    quantity: signal.quantity,","highlight_start":1,"highlight_end":63},{"text":"                                    price: None,","highlight_start":1,"highlight_end":49},{"text":"                                    timestamp: std::time::SystemTime::now()","highlight_start":1,"highlight_end":76},{"text":"                                        .duration_since(std::time::UNIX_EPOCH)","highlight_start":1,"highlight_end":79},{"text":"                                        .unwrap()","highlight_start":1,"highlight_end":50},{"text":"                                        .as_secs(),","highlight_start":1,"highlight_end":52},{"text":"                                };","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                // Validate with risk manager","highlight_start":1,"highlight_end":62},{"text":"                                if risk_manager","highlight_start":1,"highlight_end":48},{"text":"                                    .validate_order(&order, signal.target_price)","highlight_start":1,"highlight_end":81},{"text":"                                    .await","highlight_start":1,"highlight_end":43},{"text":"                                {","highlight_start":1,"highlight_end":34},{"text":"                                    // Submit order","highlight_start":1,"highlight_end":52},{"text":"                                    if let Ok(order_id) =","highlight_start":1,"highlight_end":58},{"text":"                                        order_executor.submit_order(order.clone()).await","highlight_start":1,"highlight_end":89},{"text":"                                    {","highlight_start":1,"highlight_end":38},{"text":"                                        println!(\"Order submitted: {}\", order_id);","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        // Update position","highlight_start":1,"highlight_end":59},{"text":"                                        let quantity = match order.side {","highlight_start":1,"highlight_end":74},{"text":"                                            OrderSide::Buy => order.quantity,","highlight_start":1,"highlight_end":78},{"text":"                                            OrderSide::Sell => -order.quantity,","highlight_start":1,"highlight_end":80},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        risk_manager","highlight_start":1,"highlight_end":53},{"text":"                                            .update_position(","highlight_start":1,"highlight_end":62},{"text":"                                                &order.symbol,","highlight_start":1,"highlight_end":63},{"text":"                                                quantity,","highlight_start":1,"highlight_end":58},{"text":"                                                signal.target_price,","highlight_start":1,"highlight_end":69},{"text":"                                            )","highlight_start":1,"highlight_end":46},{"text":"                                            .await;","highlight_start":1,"highlight_end":52},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                tokio::time::sleep(Duration::from_millis(50)).await; // High frequency - 20 Hz","highlight_start":1,"highlight_end":95},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        })","highlight_start":1,"highlight_end":10}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const MarketDataFeed`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"captured value is not `Send`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":13919,"byte_end":13930,"line_start":464,"line_end":464,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"            let market_feed = unsafe { &*market_feed };","highlight_start":42,"highlight_end":53}],"label":"has type `*const MarketDataFeed` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:460:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m460\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        tokio::spawn(async move {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m ______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m461\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let strategies = unsafe { &*strategies };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let risk_manager = unsafe { &*risk_manager };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m463\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let order_executor = unsafe { &*order_executor };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:460:22: 460:32}`, the trait `std::marker::Send` is not implemented for `*const MarketDataFeed`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: captured value is not `Send`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:464:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m464\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let market_feed = unsafe { &*market_feed };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mhas type `*const MarketDataFeed` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/zizo/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.45.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3455,"byte_end":3456,"line_start":139,"line_end":139,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"            let action = if price_change > 0 {","highlight_start":44,"highlight_end":45}],"label":"expected `f64`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3440,"byte_end":3452,"line_start":139,"line_end":139,"column_start":29,"column_end":41,"is_primary":false,"text":[{"text":"            let action = if price_change > 0 {","highlight_start":29,"highlight_end":41}],"label":"expected because this is `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use a float literal","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3456,"byte_end":3456,"line_start":139,"line_end":139,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            let action = if price_change > 0 {","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":".0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:139:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let action = if price_change > 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found integer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected because this is `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use a float literal\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let action = if price_change > 0\u001b[0m\u001b[0m\u001b[38;5;10m.0\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":5004,"byte_end":5005,"line_start":195,"line_end":195,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"            let action = if deviation > 0 {","highlight_start":41,"highlight_end":42}],"label":"expected `f64`, found integer","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":4992,"byte_end":5001,"line_start":195,"line_end":195,"column_start":29,"column_end":38,"is_primary":false,"text":[{"text":"            let action = if deviation > 0 {","highlight_start":29,"highlight_end":38}],"label":"expected because this is `f64`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use a float literal","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":5005,"byte_end":5005,"line_start":195,"line_end":195,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"            let action = if deviation > 0 {","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":".0","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:195:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let action = if deviation > 0 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `f64`, found integer\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected because this is `f64`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use a float literal\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            let action = if deviation > 0\u001b[0m\u001b[0m\u001b[38;5;10m.0\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 7 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
